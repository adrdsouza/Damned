import{w as S}from"./CsLHPPUA.js";import{_ as h}from"./C1FmrZbK.js";import{c as b}from"./DMI_bSna.js";import{K as m}from"./CtARYoZa.js";import{t as _}from"./DcmIUciy.js";import"./CJBvT94Z.js";let v;try{v=b()}catch(t){console.error("Error initializing Medusa client in cart service:",t)}function u(){if(!v)try{v=b()}catch(t){return console.error("Failed to create Medusa client on demand:",t),null}return v}const T=t=>new Promise(a=>setTimeout(a,t)),k=t=>Math.min(1e3*Math.pow(2,t),1e4);async function M(){var r,n,c,l,f,w;if(localStorage.getItem("medusa_offline_mode")==="true")return console.log("Operating in offline mode, using local cart only"),null;const a=localStorage.getItem("medusa_cart_id");if(a)try{const i=u();if(!i)throw new Error("Medusa client unavailable");const{cart:d}=await i.carts.retrieve(a);if(d)return d;localStorage.removeItem("medusa_cart_id")}catch(i){if(localStorage.removeItem("medusa_cart_id"),console.error("Error retrieving cart:",i),((r=i.message)==null?void 0:r.includes("Network Error"))||i.name==="TypeError"||((n=i.message)==null?void 0:n.includes("Failed to fetch"))||((c=i.message)==null?void 0:c.includes("Medusa client unavailable"))||!i.response)return console.log("Network error when retrieving cart, setting offline mode"),localStorage.setItem("medusa_offline_mode","true"),setTimeout(()=>{localStorage.removeItem("medusa_offline_mode")},5*60*1e3),null}let e=0;const o=3;for(;e<o;)try{const i=u();if(!i)throw new Error("Medusa client unavailable");const{cart:d}=await i.carts.create({});if(d!=null&&d.id)return localStorage.setItem("medusa_cart_id",d.id),d;throw new Error("Received invalid cart from server")}catch(i){if(e++,console.warn(`Cart creation attempt ${e} failed:`,i),(((l=i.message)==null?void 0:l.includes("Network Error"))||i.name==="TypeError"||((f=i.message)==null?void 0:f.includes("Failed to fetch"))||((w=i.message)==null?void 0:w.includes("Medusa client unavailable"))||i.name==="AbortError"||!i.response)&&e>=o)return console.log("Network error when creating cart, setting offline mode"),localStorage.setItem("medusa_offline_mode","true"),setTimeout(()=>{localStorage.removeItem("medusa_offline_mode")},5*60*1e3),_.error("Unable to connect to store backend. Using local cart instead.",{duration:5e3}),null;if(e<o){const E=k(e);console.log(`Retrying in ${E}ms...`),await T(E);continue}return console.warn("Error creating Medusa cart after maximum retries, falling back to local cart"),null}return null}async function N(t,a,e){var o,r;try{const n=await M();if(!n){console.log("No Medusa cart available, using local cart");const{addToCart:w}=await h(async()=>{const{addToCart:i}=await Promise.resolve().then(()=>C);return{addToCart:i}},void 0,import.meta.url);return w(t,a,e),null}const c=(e==null?void 0:e.id)||((r=(o=t.variations)==null?void 0:o[0])==null?void 0:r.id);if(!c)throw new Error("No variant ID found for product");const l=u();if(!l)throw new Error("Medusa client unavailable");const{cart:f}=await l.carts.lineItems.create(n.id,{variant_id:c,quantity:a});return p(f),f}catch(n){console.error("Error adding item to Medusa cart:",n);const{addToCart:c}=await h(async()=>{const{addToCart:l}=await Promise.resolve().then(()=>C);return{addToCart:l}},void 0,import.meta.url);return c(t,a,e),null}}async function P(t){var a;try{const e=localStorage.getItem("medusa_cart_id");if(!e)throw new Error("No cart ID found");const o=u();if(!o)throw new Error("Medusa client unavailable");const{cart:r}=await o.carts.lineItems.delete(e,t);return p(r),r}catch(e){console.error("Error removing item from Medusa cart:",e);const r=m(s).find(n=>n.medusa_line_item_id===t);if(r){const{removeFromCart:n}=await h(async()=>{const{removeFromCart:c}=await Promise.resolve().then(()=>C);return{removeFromCart:c}},void 0,import.meta.url);n(r.product.id,(a=r.variation)==null?void 0:a.id)}return null}}async function D(t,a){var e;try{const o=localStorage.getItem("medusa_cart_id");if(!o)throw new Error("No cart ID found");const r=u();if(!r)throw new Error("Medusa client unavailable");const{cart:n}=await r.carts.lineItems.update(o,t,{quantity:a});return p(n),n}catch(o){console.error("Error updating item in Medusa cart:",o);const n=m(s).find(c=>c.medusa_line_item_id===t);if(n){const{updateCartItemQuantity:c}=await h(async()=>{const{updateCartItemQuantity:l}=await Promise.resolve().then(()=>C);return{updateCartItemQuantity:l}},void 0,import.meta.url);c(n.product.id,a,(e=n.variation)==null?void 0:e.id)}return null}}async function X(){try{if(localStorage.getItem("medusa_offline_mode")==="true")return console.log("Operating in offline mode, calculating local cart totals"),g();const a=localStorage.getItem("medusa_cart_id");if(!a)return g();const e=u();if(!e)return g();const{cart:o}=await e.carts.retrieve(a);return o?{subtotal:(o.subtotal||0)/100,shipping:((o.shipping_total||0)+(o.tax_total||0))/100,total:(o.total||0)/100}:g()}catch(t){return console.error("Error getting cart totals:",t),g()}}function g(){const t=m(s),a=t.reduce((o,r)=>{var n;return o+(((n=r.variation)==null?void 0:n.price)||r.product.price)*r.quantity},0),e=t.length>0?10:0;return{subtotal:a,shipping:e,total:a+e}}async function B(t){var a,e,o;try{if(localStorage.getItem("medusa_offline_mode")==="true")return console.log("Operating in offline mode, cannot apply discount code"),_.error("Discount codes unavailable in offline mode"),null;const n=localStorage.getItem("medusa_cart_id");if(!n)throw new Error("No cart ID found");const c=u();if(!c)throw new Error("Medusa client unavailable");const{cart:l}=await c.carts.update(n,{discounts:[{code:t}]});return p(l),_.success("Discount code applied successfully"),l}catch(r){return console.error("Error applying discount code:",r),((a=r.message)==null?void 0:a.includes("Network Error"))||r.name==="TypeError"||((e=r.message)==null?void 0:e.includes("Failed to fetch"))||((o=r.message)==null?void 0:o.includes("Medusa client unavailable"))||!r.response?_.error("Unable to connect to store backend. Please try again later."):_.error("Invalid coupon code"),null}}async function K(){try{const t=localStorage.getItem("medusa_offline_mode_timestamp");if(t){const o=parseInt(t,10);Date.now()-o>5*60*1e3&&(localStorage.removeItem("medusa_offline_mode"),localStorage.removeItem("medusa_offline_mode_timestamp"))}if(localStorage.getItem("medusa_offline_mode")==="true"){console.log("Operating in offline mode, using local cart only");return}const e=await M();e?p(e):console.log("Using local cart as fallback")}catch(t){console.error("Error initializing cart:",t)}}function p(t){if(!t||!t.items)return;const a=t.items.map(e=>{var o,r;return{product:{id:e.variant.product.id,name:e.variant.product.title,slug:e.variant.product.handle,description:e.variant.product.description||"",price:e.unit_price/100,image:e.thumbnail||`/images/products/${e.variant.product.handle}.jpg`,category:((r=(o=e.variant.product.collection)==null?void 0:o.title)==null?void 0:r.toLowerCase())||"uncategorized"},quantity:e.quantity,variation:e.variant?{id:e.variant.id,name:e.variant.title,price:e.unit_price/100,inStock:!0,attributes:{},image:e.thumbnail}:void 0,medusa_line_item_id:e.id}});s.set(a)}const x=[{product:{id:1,name:"Djinn XL Titanium",slug:"djinn-xl-titanium",description:"The Djinn XL is our flagship folding knife, featuring a premium titanium handle and a high-performance CPM-S35VN blade.",price:249.99,salePrice:199.99,image:"/images/products/djinn-xl.jpg",category:"knives"},quantity:1,variation:{id:"djinn-xl-stonewash",name:"Stonewashed",price:249.99,salePrice:199.99,inStock:!0,attributes:{finish:"Stonewashed",blade:"CPM-S35VN"},image:"/images/products/djinn-xl-stonewash.jpg"}}],s=S(x);function j(t,a,e){N(t,a,e).catch(()=>{O(t,a,e)})}function O(t,a,e){const o=m(s),r=o.findIndex(n=>n.product.id===t.id&&(!e||!n.variation||n.variation.id===e.id));if(r!==-1){const n=[...o];n[r].quantity+=a,s.set(n)}else s.update(n=>[...n,{product:t,quantity:a,variation:e}])}function F(t,a){{const o=m(s).find(r=>r.product.id===t&&(!a||r.variation&&r.variation.id===a));o&&o.medusa_line_item_id?P(o.medusa_line_item_id).catch(()=>{y(t,a)}):y(t,a)}}function y(t,a){s.update(e=>e.filter(o=>o.product.id!==t||a&&o.variation&&o.variation.id!==a))}function L(t,a,e){{const r=m(s).find(n=>n.product.id===t&&(!e||n.variation&&n.variation.id===e));r&&r.medusa_line_item_id?D(r.medusa_line_item_id,a).catch(()=>{I(t,a,e)}):I(t,a,e)}}function I(t,a,e){s.update(o=>o.map(r=>r.product.id===t&&(!e||r.variation&&r.variation.id===e)?{...r,quantity:a}:r))}function R(){localStorage.removeItem("medusa_cart_id"),s.set([])}const C=Object.freeze(Object.defineProperty({__proto__:null,addToCart:j,cart:s,clearCart:R,removeFromCart:F,updateCartItemQuantity:L},Symbol.toStringTag,{value:"Module"}));export{j as a,s as b,R as c,B as d,X as g,K as i,F as r,L as u};
